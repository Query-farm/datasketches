#include "datasketches_extension.hpp"


#include "duckdb/parser/parsed_data/create_scalar_function_info.hpp"
#include "duckdb/parser/parsed_data/create_aggregate_function_info.hpp"
#include "duckdb/function/scalar_function.hpp"

#include <DataSketches/quantiles_sketch.hpp>
#include <DataSketches/kll_sketch.hpp>
#include <DataSketches/req_sketch.hpp>
#include <DataSketches/tdigest.hpp>
#include <DataSketches/hll.hpp>
#include <DataSketches/cpc_sketch.hpp>
#include <DataSketches/cpc_union.hpp>

using namespace duckdb;
namespace duckdb_datasketches
{


static std::string toLowerCase(const std::string& input) {
    std::string result = input;
    std::transform(result.begin(), result.end(), result.begin(), [](unsigned char c) {
        return std::tolower(c);
    });
    return result;
}

    {% for sketch_type in sketch_types %}


struct DS{{sketch_type}}BindData : public FunctionData {
	DS{{sketch_type}}BindData() {
	}
	explicit DS{{sketch_type}}BindData({{sketch_k_cpp_type[sketch_type]}} k) : k(k) {
	}

	unique_ptr<FunctionData> Copy() const override {
		return make_uniq<DS{{sketch_type}}BindData>(k);
	}

	bool Equals(const FunctionData &other_p) const override {
		auto &other = other_p.Cast<DS{{sketch_type}}BindData>();
        return k == other.k;
	}

    {{sketch_k_cpp_type[sketch_type]}} k;
};


unique_ptr<FunctionData> DS{{sketch_type}}Bind(ClientContext &context, AggregateFunction &function,
                                            vector<unique_ptr<Expression>> &arguments) {
	if (arguments[0]->HasParameter()) {
		throw ParameterNotResolvedException();
	}
	if (!arguments[0]->IsFoldable()) {
		throw BinderException("{{sketch_type}} can only take a constant K value");
	}
	Value k_val = ExpressionExecutor::EvaluateScalar(context, *arguments[0]);
	if (k_val.IsNull()) {
		throw BinderException("{{sketch_type}} K value cannot be NULL");
	}

	auto actual_k = k_val.GetValue<{{sketch_k_cpp_type[sketch_type]}}>();

	Function::EraseArgument(function, arguments, 0);
	return make_uniq<DS{{sketch_type}}BindData>(actual_k);
}


    {% if sketch_type not in counting_sketch_names %}
    template <class T>
    {% endif %}
    struct DS{{sketch_type}}State
    {
        {% if sketch_type in counting_sketch_names %}
        {{sketch_class_name(sketch_type)}} *sketch = nullptr;
        {% else %}
        {{sketch_class_name(sketch_type)}}<T> *sketch = nullptr;
        {% endif %}

        ~DS{{sketch_type}}State()
        {
            if (sketch)
            {
                delete sketch;
            }
        }

        {% if sketch_type in ["Quantiles", "KLL"] %}
        void CreateSketch(int32_t k)
        {
            D_ASSERT(!sketch);
            D_ASSERT(k > 0);
            D_ASSERT(k <= 32768);
            sketch = new {{sketch_class_name(sketch_type)}}<T>(k);
        }
        {% elif sketch_type == "REQ" %}
        void CreateSketch(int32_t k)
        {
            D_ASSERT(!sketch);
            D_ASSERT(k >= 4);
            D_ASSERT(k <= 1024);
            sketch = new {{sketch_class_name(sketch_type)}}<T>(k);
        }
        {% elif sketch_type == "TDigest" %}
        void CreateSketch(uint16_t k)
        {
            D_ASSERT(!sketch);
            sketch = new {{sketch_class_name(sketch_type)}}<T>(k);
        }
        {% elif sketch_type == "HLL" %}
        void CreateSketch(uint16_t k)
        {
            D_ASSERT(!sketch);
            sketch = new {{sketch_class_name(sketch_type)}}(k);
        }
        {% elif sketch_type == "CPC" %}
        void CreateSketch(uint8_t k)
        {
            D_ASSERT(!sketch);
            sketch = new {{sketch_class_name(sketch_type)}}(k);
        }
        {% endif %}

        void CreateSketch(const DS{{sketch_type}}State &existing)
        {
            if (existing.sketch)
            {
                {% if sketch_type in counting_sketch_names %}
                sketch = new {{sketch_class_name(sketch_type)}}(*existing.sketch);
                {% else %}
                sketch = new {{sketch_class_name(sketch_type)}}<T>(*existing.sketch);
                {% endif %}
            }
        }

        {% if sketch_type not in counting_sketch_names %}
        {{sketch_class_name(sketch_type)}}<T> deserialize_sketch(const string_t &data)
        {
            return {{sketch_class_name(sketch_type)}}<T>::deserialize(data.GetDataUnsafe(), data.GetSize());
        }
        {% else %}
        {{sketch_class_name(sketch_type)}} deserialize_sketch(const string_t &data)
        {
            return {{sketch_class_name(sketch_type)}}::deserialize(data.GetDataUnsafe(), data.GetSize());
        }
        {% endif %}
    };



    {% if sketch_type in counting_sketch_names %}
    static LogicalType Create{{sketch_type}}CountingSketchType(ExtensionLoader &loader)
    {
        auto new_type = LogicalType(LogicalTypeId::BLOB);
        auto new_type_name = "sketch_{{sketch_type|lower}}";
        auto type_info = CreateTypeInfo(new_type_name, LogicalType::BLOB);
        type_info.temporary = false;
        type_info.internal = true;
        type_info.comment = "Sketch type for {{sketch_type}} sketch";
        new_type.SetAlias(new_type_name);
        auto &system_catalog = Catalog::GetSystemCatalog(loader.GetDatabaseInstance());
        auto data = CatalogTransaction::GetSystemTransaction(loader.GetDatabaseInstance());
        system_catalog.CreateType(data, type_info);
	    loader.RegisterCastFunction(LogicalType::BLOB, new_type, DefaultCasts::ReinterpretCast, 1);
        loader.RegisterCastFunction(new_type, LogicalType::BLOB, DefaultCasts::ReinterpretCast, 1);
        return new_type;
    }
    {% else %}
    static LogicalType Create{{sketch_type}}SketchType(ExtensionLoader &loader, LogicalType embedded_type)
    {
        auto new_type = LogicalType(LogicalTypeId::BLOB);
        auto type_suffix = toLowerCase(embedded_type.ToString());
        auto new_type_name = "sketch_{{sketch_type|lower}}_" + type_suffix;


        new_type.SetAlias(new_type_name);
        auto type_info = CreateTypeInfo(new_type_name, new_type);
        type_info.temporary = false;
        type_info.internal = true;
        type_info.comment = "Sketch type for {{sketch_type}} sketch with embedded type " + embedded_type.ToString();
        auto &system_catalog = Catalog::GetSystemCatalog(loader.GetDatabaseInstance());
        auto data = CatalogTransaction::GetSystemTransaction(loader.GetDatabaseInstance());
        system_catalog.CreateType(data, type_info);
	    loader.RegisterCastFunction(LogicalType::BLOB, new_type, DefaultCasts::ReinterpretCast, 1);
        loader.RegisterCastFunction(new_type, LogicalType::BLOB, DefaultCasts::ReinterpretCast, 1);
        return new_type;
    }
    {% endif %}


    {%- endfor %}

    struct DSSketchOperationBase {
        template <class STATE>
        static void Initialize(STATE &state)
        {
            state.sketch = nullptr;
        }

        template <class STATE>
        static void Destroy(STATE &state, AggregateInputData &aggr_input_data) {
            if (state.sketch) {
                delete state.sketch;
                state.sketch = nullptr;
            }
        }

        static bool IgnoreNull() { return true; }
    };

    template <class BIND_DATA_TYPE>
    struct DSQuantilesMergeOperation : DSSketchOperationBase
    {
        template <class A_TYPE, class STATE, class OP>
        static void Operation(STATE &state,
                              const A_TYPE &a_data,
                              AggregateUnaryInput &idata)
        {
            if (!state.sketch)
            {
                auto &bind_data = idata.input.bind_data->template Cast<BIND_DATA_TYPE>();
                state.CreateSketch(bind_data.k);
            }

            // this is a sketch in b_data, so we need to deserialize it.
            state.sketch->merge(state.deserialize_sketch(a_data));
        }

        template <class INPUT_TYPE, class STATE, class OP>
        static void ConstantOperation(STATE &state, const INPUT_TYPE &input, AggregateUnaryInput &unary_input,
                                    idx_t count) {
            for (idx_t i = 0; i < count; i++) {
                Operation<INPUT_TYPE, STATE, OP>(state, input, unary_input);
            }
        }

        template <class STATE, class OP>
        static void Combine(const STATE &source, STATE &target,
                            AggregateInputData &aggr_input_data)
        {
            if (!target.sketch)
            {
                target.CreateSketch(source);
            }
            else
            {
                target.sketch->merge(*source.sketch);
            }
        }

        template <class T, class STATE>
        static void Finalize(STATE &state, T &target,
                             AggregateFinalizeData &finalize_data)
        {
            if (!state.sketch)
            {
                finalize_data.ReturnNull();
            }
            else
            {
                auto serialized_data = state.sketch->serialize();
                auto sketch_string = std::string(serialized_data.begin(), serialized_data.end());
                target = StringVector::AddStringOrBlob(finalize_data.result, sketch_string);
            }
        }
    };

    template <class BIND_DATA_TYPE>
    struct DSQuantilesCreateOperation : DSSketchOperationBase
    {
        template <class A_TYPE, class STATE, class OP>
        static void Operation(STATE &state,
                              const A_TYPE &a_data,
                              AggregateUnaryInput &idata)
        {
            if (!state.sketch)
            {
                auto &bind_data = idata.input.bind_data->template Cast<BIND_DATA_TYPE>();
                state.CreateSketch(bind_data.k);
            }

            state.sketch->update(a_data);
        }

        template <class INPUT_TYPE, class STATE, class OP>
        static void ConstantOperation(STATE &state, const INPUT_TYPE &input, AggregateUnaryInput &unary_input,
                                    idx_t count) {
            for (idx_t i = 0; i < count; i++) {
                Operation<INPUT_TYPE, STATE, OP>(state, input, unary_input);
            }
        }

        template <class STATE, class OP>
        static void Combine(const STATE &source, STATE &target,
                            AggregateInputData &aggr_input_data)
        {
            if (!target.sketch)
            {
                target.CreateSketch(source);
            }
            else
            {
                target.sketch->merge(*source.sketch);
            }
        }

        template <class T, class STATE>
        static void Finalize(STATE &state, T &target,
                             AggregateFinalizeData &finalize_data)
        {
            if (!state.sketch)
            {
                finalize_data.ReturnNull();
            }
            else
            {
                auto serialized_data = state.sketch->serialize();
                auto sketch_string = std::string(serialized_data.begin(), serialized_data.end());
                target = StringVector::AddStringOrBlob(finalize_data.result, sketch_string);
            }
        }
    };

    template <class BIND_DATA_TYPE>
    struct DSHLLCreateOperation : DSSketchOperationBase
    {
        template <class A_TYPE, class STATE, class OP>
        static void Operation(STATE &state,
                              const A_TYPE &a_data,
                              AggregateUnaryInput &idata)
        {
            if (!state.sketch)
            {
                auto &bind_data = idata.input.bind_data->template Cast<BIND_DATA_TYPE>();
                state.CreateSketch(bind_data.k);
            }

            if constexpr (std::is_same_v<A_TYPE, duckdb::string_t>) {
                state.sketch->update(a_data.GetData(), a_data.GetSize());
            } else {
                state.sketch->update(a_data);
            }
        }

        template <class INPUT_TYPE, class STATE, class OP>
        static void ConstantOperation(STATE &state, const INPUT_TYPE &input, AggregateUnaryInput &unary_input,
                                    idx_t count) {
            for (idx_t i = 0; i < count; i++) {
                Operation<INPUT_TYPE, STATE, OP>(state, input, unary_input);
            }
        }

        template <class STATE, class OP>
        static void Combine(const STATE &source, STATE &target,
                            AggregateInputData &aggr_input_data)
        {
            if (!target.sketch)
            {
                target.CreateSketch(source);
            }
            else
            {
                datasketches::hll_union u(target.sketch->get_lg_config_k());
                u.update(*target.sketch);
                if(source.sketch) {
                    u.update(*source.sketch);
                }
                *target.sketch = u.get_result(datasketches::target_hll_type::HLL_4);
            }
        }

        template <class T, class STATE>
        static void Finalize(STATE &state, T &target,
                             AggregateFinalizeData &finalize_data)
        {
            if (!state.sketch)
            {
                finalize_data.ReturnNull();
            }
            else
            {
                auto serialized_data = state.sketch->serialize_updatable();
                auto sketch_string = std::string(serialized_data.begin(), serialized_data.end());
                target = StringVector::AddStringOrBlob(finalize_data.result, sketch_string);
            }
        }
    };

    template <class BIND_DATA_TYPE>
    struct DSHLLMergeOperation : DSSketchOperationBase
    {

        template <class A_TYPE, class STATE, class OP>
        static void Operation(STATE &state,
                              const A_TYPE &a_data,
                              AggregateUnaryInput &idata)
        {
            auto &bind_data = idata.input.bind_data->template Cast<BIND_DATA_TYPE>();

            if (!state.sketch)
            {
                state.CreateSketch(bind_data.k);
            }

            auto a_sketch = state.deserialize_sketch(a_data);

            datasketches::hll_union u(bind_data.k);
            if(state.sketch) {
                u.update(*state.sketch);
            }
            u.update(a_sketch);

            *state.sketch = u.get_result(datasketches::target_hll_type::HLL_4);
        }

        template <class INPUT_TYPE, class STATE, class OP>
        static void ConstantOperation(STATE &state, const INPUT_TYPE &input, AggregateUnaryInput &unary_input,
                                    idx_t count) {
            for (idx_t i = 0; i < count; i++) {
                Operation<INPUT_TYPE, STATE, OP>(state, input, unary_input);
            }
        }

        template <class STATE, class OP>
        static void Combine(const STATE &source, STATE &target,
                            AggregateInputData &aggr_input_data)
        {
            if (!target.sketch)
            {
                target.CreateSketch(source);
            }
            else
            {
                datasketches::hll_union u(target.sketch->get_lg_config_k());
                if(source.sketch) {
                    u.update(*source.sketch);
                }
                u.update(*target.sketch);

                *target.sketch = u.get_result(datasketches::target_hll_type::HLL_4);
            }
        }

        template <class T, class STATE>
        static void Finalize(STATE &state, T &target,
                             AggregateFinalizeData &finalize_data)
        {
            if (!state.sketch)
            {
                finalize_data.ReturnNull();
            }
            else
            {
                auto serialized_data = state.sketch->serialize_updatable();
                auto sketch_string = std::string(serialized_data.begin(), serialized_data.end());
                target = StringVector::AddStringOrBlob(finalize_data.result, sketch_string);
            }
        }
    };


    template <class BIND_DATA_TYPE>
    struct DSCPCMergeOperation : DSSketchOperationBase
    {
        template <class A_TYPE, class STATE, class OP>
        static void Operation(STATE &state,
                              const A_TYPE &a_data,
                              AggregateUnaryInput &idata)
        {
            auto &bind_data = idata.input.bind_data->template Cast<BIND_DATA_TYPE>();

            if (!state.sketch)
            {
                state.CreateSketch(bind_data.k);
            }

            auto a_sketch = state.deserialize_sketch(a_data);
            datasketches::cpc_union u(bind_data.k);
            if(state.sketch) {
                u.update(*state.sketch);
            }
            u.update(a_sketch);

            *state.sketch = u.get_result();
        }

        template <class INPUT_TYPE, class STATE, class OP>
        static void ConstantOperation(STATE &state, const INPUT_TYPE &input, AggregateUnaryInput &unary_input,
                                    idx_t count) {
            for (idx_t i = 0; i < count; i++) {
                Operation<INPUT_TYPE, STATE, OP>(state, input, unary_input);
            }
        }

        template <class STATE, class OP>
        static void Combine(const STATE &source, STATE &target,
                            AggregateInputData &aggr_input_data)
        {
            if (!target.sketch)
            {
                target.CreateSketch(source);
            }
            else
            {
                datasketches::cpc_union u(target.sketch->get_lg_k());
                if(source.sketch) {
                    u.update(*source.sketch);
                }
                u.update(*target.sketch);
                *target.sketch = u.get_result();
            }
        }

        template <class T, class STATE>
        static void Finalize(STATE &state, T &target,
                             AggregateFinalizeData &finalize_data)
        {
            if (!state.sketch)
            {
                finalize_data.ReturnNull();
            }
            else
            {
                auto serialized_data = state.sketch->serialize();
                auto sketch_string = std::string(serialized_data.begin(), serialized_data.end());
                target = StringVector::AddStringOrBlob(finalize_data.result, sketch_string);
            }
        }
    };

    template <class BIND_DATA_TYPE>
    struct DSCPCCreateOperation : DSSketchOperationBase
    {
        template <class A_TYPE, class STATE, class OP>
        static void Operation(STATE &state,
                              const A_TYPE &a_data,
                              AggregateUnaryInput &idata)
        {
            if (!state.sketch)
            {
                auto &bind_data = idata.input.bind_data->template Cast<BIND_DATA_TYPE>();
                state.CreateSketch(bind_data.k);
            }

            if constexpr (std::is_same_v<A_TYPE, duckdb::string_t>) {
                state.sketch->update(a_data.GetData(), a_data.GetSize());
            } else {
                state.sketch->update(a_data);
            }
        }

        template <class INPUT_TYPE, class STATE, class OP>
        static void ConstantOperation(STATE &state, const INPUT_TYPE &input, AggregateUnaryInput &unary_input,
                                    idx_t count) {
            for (idx_t i = 0; i < count; i++) {
                Operation<INPUT_TYPE, STATE, OP>(state, input, unary_input);
            }
        }


        template <class STATE, class OP>
        static void Combine(const STATE &source, STATE &target,
                            AggregateInputData &aggr_input_data)
        {
            if (!target.sketch)
            {
                target.CreateSketch(source);
            }
            else
            {
                datasketches::cpc_union u(target.sketch->get_lg_k());
                u.update(*target.sketch);
                if(source.sketch) {
                    u.update(*source.sketch);
                }
                *target.sketch = u.get_result();
            }
        }


        template <class T, class STATE>
        static void Finalize(STATE &state, T &target,
                             AggregateFinalizeData &finalize_data)
        {
            if (!state.sketch)
            {
                finalize_data.ReturnNull();
            }
            else
            {
                auto serialized_data = state.sketch->serialize();
                auto sketch_string = std::string(serialized_data.begin(), serialized_data.end());
                target = StringVector::AddStringOrBlob(finalize_data.result, sketch_string);
            }
        }
    };



{% for sketch_type in sketch_types %}
    {% for unary_function in functions_per_sketch_type(sketch_type) %}

{% if sketch_type not in counting_sketch_names %}
template <class T>
{% endif %}
static inline void DS{{sketch_type}}{{unary_function.name}}(DataChunk &args, ExpressionState &state, Vector &result)
{
    // Get the references to the incoming vectors.
    D_ASSERT(args.ColumnCount() == {{unary_function.arguments|length}});

    {% for a in unary_function.arguments %}
        auto &{{a.name}}_vector = args.data[{{loop.index0}}];
    {%- endfor %}

    {{ get_function_block(unary_function) }}

}

    {% endfor %}


    {% if sketch_type not in counting_sketch_names %}
    template <typename T>
    auto static DS{{sketch_type}}MergeAggregate(const LogicalType &type, const LogicalType &result_type) -> AggregateFunction
    {% else %}
    auto static DS{{sketch_type}}MergeAggregate(const LogicalType &result_type) -> AggregateFunction
    {% endif %}
    {
        {% if sketch_type == "HLL" %}
        return AggregateFunction::UnaryAggregateDestructor<DS{{sketch_type}}State, string_t, string_t, DSHLLMergeOperation<DS{{sketch_type}}BindData>, AggregateDestructorType::LEGACY>(
            result_type, result_type);
        {% elif sketch_type == "CPC" %}
        return AggregateFunction::UnaryAggregateDestructor<DS{{sketch_type}}State, string_t, string_t, DSCPCMergeOperation<DS{{sketch_type}}BindData>, AggregateDestructorType::LEGACY>(
            result_type, result_type);
        {% else %}
        return AggregateFunction::UnaryAggregateDestructor<DS{{sketch_type}}State<T>, string_t, string_t, DSQuantilesMergeOperation<DS{{sketch_type}}BindData>, AggregateDestructorType::LEGACY>(
            result_type, result_type);
        {% endif %}
    }



    template <typename T>
    auto static DS{{sketch_type}}CreateAggregate(const LogicalType &type, const LogicalType &result_type) -> AggregateFunction
    {
        {% if sketch_type == 'HLL' %}
        return AggregateFunction::UnaryAggregateDestructor<DS{{sketch_type}}State, T, string_t, DSHLLCreateOperation<DS{{sketch_type}}BindData>, AggregateDestructorType::LEGACY>(
            type, result_type);
        {% elif sketch_type == 'CPC' %}
        return AggregateFunction::UnaryAggregateDestructor<DS{{sketch_type}}State, T, string_t, DSCPCCreateOperation<DS{{sketch_type}}BindData>, AggregateDestructorType::LEGACY>(
            type, result_type);
        {% else %}
        return AggregateFunction::UnaryAggregateDestructor<DS{{sketch_type}}State<T>, T, string_t, DSQuantilesCreateOperation<DS{{sketch_type}}BindData>, AggregateDestructorType::LEGACY>(
            type, result_type);
        {% endif %}
    }


  void Load{{sketch_type}}Sketch(ExtensionLoader &loader) {


      {% if sketch_type in counting_sketch_names %}
        auto sketch_type = Create{{sketch_type}}CountingSketchType(loader);
      {% else %}
        std::unordered_map<LogicalTypeId, LogicalType> sketch_map_types;
        {% for logical_type in logical_type_to_cplusplus_type(sketch_type).keys() %}
            sketch_map_types.insert({ {{to_type_id(logical_type)}}, Create{{sketch_type}}SketchType(loader, LogicalType({{to_type_id(logical_type)}}))});
        {%- endfor %}
      {% endif %}

      {% for unary_function in functions_per_sketch_type(sketch_type) %}
      {
        ScalarFunctionSet fs("datasketch_{{sketch_type|lower}}_{{unary_function.name|lower}}");
        {% if sketch_type in counting_sketch_names %}
                fs.AddFunction(ScalarFunction(
                {{get_scalar_function_args(unary_function, None, None)}}
                ,    DS{{sketch_type}}{{unary_function.name}}));
        {% else %}
            {% for logical_type, cpp_type in logical_type_to_cplusplus_type(sketch_type).items() %}
                fs.AddFunction(ScalarFunction(
                {{get_scalar_function_args(unary_function, logical_type, cpp_type)}}
                ,    DS{{sketch_type}}{{unary_function.name}}<{{cpp_type}}>));
            {%- endfor %}
        {% endif %}

        CreateScalarFunctionInfo info(std::move(fs));

        {
            FunctionDescription desc;
            desc.description = "{{unary_function.description}}";
            desc.examples.push_back("{{unary_function.example}}");
            info.descriptions.push_back(desc);
        }

        loader.RegisterFunction(info);


      }
      {%- endfor %}

      // This funciton creates the sketches.
      {
      AggregateFunctionSet sketch("datasketch_{{sketch_type|lower}}");
      {% for logical_type, cpp_type in logical_type_to_cplusplus_type(sketch_type).items() %}
        {% if sketch_type in counting_sketch_names %}
            {
                auto fun = DS{{sketch_type}}CreateAggregate<{{cpp_type}}>({{logical_type}}, sketch_type);
                fun.bind = DS{{sketch_type}}Bind;
                fun.arguments.insert(fun.arguments.begin(), {{cpp_type_mapping[sketch_k_cpp_type[sketch_type]]}});
                sketch.AddFunction(fun);
            }
        {% else %}
            {
                auto fun = DS{{sketch_type}}CreateAggregate<{{cpp_type}}>({{logical_type}}, sketch_map_types[{{to_type_id(logical_type)}}]);
                fun.bind = DS{{sketch_type}}Bind;
                fun.arguments.insert(fun.arguments.begin(), {{cpp_type_mapping[sketch_k_cpp_type[sketch_type]]}});
                sketch.AddFunction(fun);
            }
            //sketch.AddFunction(DS{{sketch_type}}CreateAggregate<{{cpp_type}}>({{logical_type}}, sketch_map_types[{{to_type_id(logical_type)}}]));
            {
                auto fun = DS{{sketch_type}}MergeAggregate<{{cpp_type}}>({{logical_type}}, sketch_map_types[{{to_type_id(logical_type)}}]);
                fun.bind = DS{{sketch_type}}Bind;
                fun.arguments.insert(fun.arguments.begin(), {{cpp_type_mapping[sketch_k_cpp_type[sketch_type]]}});
                sketch.AddFunction(fun);
            }
            //sketch.AddFunction(DS{{sketch_type}}MergeAggregate<{{cpp_type}}>({{logical_type}}, sketch_map_types[{{to_type_id(logical_type)}}]));
        {% endif %}
      {%- endfor %}
      CreateAggregateFunctionInfo sketch_info(sketch);


    {
        FunctionDescription desc;
        desc.description = "Creates a sketch_{{sketch_type|lower}} data sketch by aggregating values or by aggregating other {{sketch_type}} data sketches";
        desc.examples.push_back("datasketch_{{sketch_type|lower}}(k, data)");
        sketch_info.descriptions.push_back(desc);
    }

      loader.RegisterFunction(sketch_info);
      }



      {% if sketch_type in counting_sketch_names %}
      {
      AggregateFunctionSet sketch("datasketch_{{sketch_type|lower}}_union");
      auto fun = DS{{sketch_type}}MergeAggregate(sketch_type);
      fun.bind = DS{{sketch_type}}Bind;
      fun.arguments.insert(fun.arguments.begin(), {{cpp_type_mapping[sketch_k_cpp_type[sketch_type]]}});
      sketch.AddFunction(fun);
      CreateAggregateFunctionInfo sketch_info(sketch);

    {
        FunctionDescription desc;
        desc.description = "Creates a sketch_{{sketch_type}} data sketch by aggregating other {{sketch_type}} data sketches";
        desc.examples.push_back("datasketch_{{sketch_type|lower}}_union(k, data)");
        sketch_info.descriptions.push_back(desc);
    }

      loader.RegisterFunction(sketch_info);
      }
      {% endif %}


  }
  {%- endfor %}


}